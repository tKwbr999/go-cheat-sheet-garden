{
  "title": "Basic Types",
  "codeExamples": [
    {
      "title": "Numeric",
      "code": "// 整数型\nvar i int = 42         // プラットフォーム依存 (32 or 64 bit)\nvar u uint = 42        // プラットフォーム依存 (32 or 64 bit)\nvar i8 int8 = 127      // -128 to 127\nvar i16 int16 = 32767  // -32768 to 32767\nvar i32 int32 = 2147483647\nvar i64 int64 = 9223372036854775807\nvar rune = 'a'         // int32 のエイリアス、Unicode コードポイントを表す\n\n// 符号なし整数\nvar u8 uint8 = 255      // 0 to 255\nvar u16 uint16 = 65535  // 0 to 65535\nvar byte = 255          // uint8 のエイリアス\n\n// 浮動小数点数型\nvar f32 float32 = 3.14\nvar f64 float64 = 3.14159265359  // IEEE-754 64-bit\n\n// 複素数型\nvar c64 complex64 = 1 + 2i\nvar c128 complex128 = complex(3.5, 4.2)"
    },
    {
      "title": "String",
      "code": "// 文字列宣言 (不変のバイトシーケンス)\nvar str string = \"hello\"\n\n// 生文字列リテラル (改行を保持、エスケープなし)\nmultiline := `This is a\nmultiline string\nwith \"quotes\" intact`\n\n// 文字列操作\ns := \"hello\"\nlen := len(s)     // 長さ: 5 (bytes, not runes)\nchar := s[1]      // byte: 101 ('e')\nsubstr := s[1:3]  // \"el\"\n\n// 文字列連結\ns1 := \"hello\"\ns2 := \"world\"\ncombined := s1 + \" \" + s2  // \"hello world\"\n\n// UTF-8 と Unicode\ns := \"Hello, 世界\"  // UTF-8 エンコードされた文字列\nrunes := []rune(s)   // Unicode コードポイントに変換\nfor i, r := range s {\n  fmt.Printf(\"%d: %c\\n\", i, r)  // rune とそのバイト位置を出力\n}"
    },
    {
      "title": "Boolean",
      "code": "// 真偽値\nvar isTrue bool = true\nvar isFalse bool = false\n\n// ゼロ値は false\nvar initialized bool  // false\n\n// 真偽値演算\nresult := isTrue && isFalse  // false (AND)\nresult = isTrue || isFalse   // true (OR)\nresult = !isTrue             // false (NOT)\n\n// 条件評価\nif isTrue {\n  // isTrue が true の場合に実行される\n}\n\n// 短絡評価\nif isValid() && doSomething() {\n  // doSomething() は isValid() が true を返す場合のみ呼び出される\n}"
    },
    {
      "title": "Type Conversions",
      "code": "// Go は明示的な型変換が必要\nvar i int = 42\nvar f float64 = float64(i)  // int から float への変換\nvar u uint = uint(f)         // float から uint への変換\n\n// 文字列変換\ns := strconv.Itoa(i)         // int to string: \"42\"\ni, err := strconv.Atoi(s)    // string to int: 42, nil\n\n// その他の文字列変換\nb := []byte(\"hello\")        // string から byte スライスへ\ns := string(b)              // byte スライスから string へ\n\n// 数値文字列のパース\nf, err := strconv.ParseFloat(\"3.14\", 64)  // string to float64\ni, err := strconv.ParseInt(\"-42\", 10, 64)  // string to int64 (base 10)\nu, err := strconv.ParseUint(\"42\", 10, 64)  // string to uint64 (base 10)\n\n// 値を文字列としてフォーマット\ns := strconv.FormatBool(true)            // \"true\"\ns := strconv.FormatFloat(3.14, 'f', 2, 64)  // \"3.14\" (2 decimal places)\ns := strconv.FormatInt(-42, 10)           // \"-42\" (base 10)"
    },
    {
      "title": "Zero Values",
      "code": "// すべての型にはゼロ値がある (宣言されたが初期化されていない場合のデフォルト)\nvar i int         // 0\nvar f float64      // 0.0\nvar b bool         // false\nvar s string       // \"\" (empty string)\nvar p *int        // nil (zero pointer)\nvar slice []int    // nil (zero slice)\nvar map1 map[string]int  // nil (zero map)\nvar ch chan int    // nil (zero channel)\nvar func1 func()   // nil (zero function)\nvar err error      // nil (zero interface)\n\n// 構造体のゼロ値は、すべてのフィールドがそれぞれのゼロ値に設定される\ntype Person struct {\n  Name string\n  Age  int\n}\nvar p Person  // {Name: \"\", Age: 0}"
    }
  ]
}