{
  "title": "Basic Types",
  "codeExamples": [
    {
      "title": "Numeric",
      "code": "// Integer types\nvar i int = 42         // platform dependent (32 or 64 bit)\nvar u uint = 42        // platform dependent (32 or 64 bit)\nvar i8 int8 = 127      // -128 to 127\nvar i16 int16 = 32767  // -32768 to 32767\nvar i32 int32 = 2147483647\nvar i64 int64 = 9223372036854775807\nvar rune = 'a'         // alias for int32, represents Unicode code point\n\n// Unsigned integers\nvar u8 uint8 = 255      // 0 to 255\nvar u16 uint16 = 65535  // 0 to 65535\nvar byte = 255          // alias for uint8\n\n// Float types\nvar f32 float32 = 3.14\nvar f64 float64 = 3.14159265359  // IEEE-754 64-bit\n\n// Complex types\nvar c64 complex64 = 1 + 2i\nvar c128 complex128 = complex(3.5, 4.2)"
    },
    {
      "title": "String",
      "code": "// String declaration (immutable sequence of bytes)\nvar str string = \"hello\"\n\n// Raw string literal (preserves line breaks, no escaping)\nmultiline := `This is a\nmultiline string\nwith \"quotes\" intact`\n\n// String operations\ns := \"hello\"\nlen := len(s)     // Length: 5 (bytes, not runes)\nchar := s[1]      // byte: 101 ('e')\nsubstr := s[1:3]  // \"el\"\n\n// String concatenation\ns1 := \"hello\"\ns2 := \"world\"\ncombined := s1 + \" \" + s2  // \"hello world\"\n\n// UTF-8 and Unicode\ns := \"Hello, 世界\"  // UTF-8 encoded string\nrunes := []rune(s)   // Convert to Unicode code points\nfor i, r := range s {\n  fmt.Printf(\"%d: %c\\n\", i, r)  // Prints rune and its byte position\n}"
    },
    {
      "title": "Boolean",
      "code": "// Boolean values\nvar isTrue bool = true\nvar isFalse bool = false\n\n// Zero value is false\nvar initialized bool  // false\n\n// Boolean operations\nresult := isTrue && isFalse  // false (AND)\nresult = isTrue || isFalse   // true (OR)\nresult = !isTrue             // false (NOT)\n\n// Conditional evaluation\nif isTrue {\n  // executed if isTrue is true\n}\n\n// Short-circuit evaluation\nif isValid() && doSomething() {\n  // doSomething() is called only if isValid() returns true\n}"
    },
    {
      "title": "Type Conversions",
      "code": "// Go requires explicit type conversions\nvar i int = 42\nvar f float64 = float64(i)  // int to float conversion\nvar u uint = uint(f)         // float to uint conversion\n\n// String conversions\ns := strconv.Itoa(i)         // int to string: \"42\"\ni, err := strconv.Atoi(s)    // string to int: 42, nil\n\n// More string conversions\nb := []byte(\"hello\")        // string to byte slice\ns := string(b)              // byte slice to string\n\n// Numeric string parsing\nf, err := strconv.ParseFloat(\"3.14\", 64)  // string to float64\ni, err := strconv.ParseInt(\"-42\", 10, 64)  // string to int64 (base 10)\nu, err := strconv.ParseUint(\"42\", 10, 64)  // string to uint64 (base 10)\n\n// Format values as strings\ns := strconv.FormatBool(true)            // \"true\"\ns := strconv.FormatFloat(3.14, 'f', 2, 64)  // \"3.14\" (2 decimal places)\ns := strconv.FormatInt(-42, 10)           // \"-42\" (base 10)"
    },
    {
      "title": "Zero Values",
      "code": "// Every type has a zero value (default when declared but not initialized)\nvar i int         // 0\nvar f float64      // 0.0\nvar b bool         // false\nvar s string       // \"\" (empty string)\nvar p *int        // nil (zero pointer)\nvar slice []int    // nil (zero slice)\nvar map1 map[string]int  // nil (zero map)\nvar ch chan int    // nil (zero channel)\nvar func1 func()   // nil (zero function)\nvar err error      // nil (zero interface)\n\n// Struct zero value has all fields set to their zero values\ntype Person struct {\n  Name string\n  Age  int\n}\nvar p Person  // {Name: \"\", Age: 0}"
    }
  ]
}