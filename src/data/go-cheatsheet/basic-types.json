{
  "title": "Basic Types",
  "codeExamples": [
    {
      "title": "Integer Types",
      "code": "// 整数型\n// プラットフォーム依存 (32 or 64 bit)\nvar i int = 42\n// プラットフォーム依存 (32 or 64 bit)\nvar u uint = 42\n// -128 to 127\nvar i8 int8 = 127\n// -32768 to 32767\nvar i16 int16 = 32767\nvar i32 int32 = 2147483647\nvar i64 int64 = 9223372036854775807\n// int32 のエイリアス、Unicode コードポイントを表す\nvar rune = 'a'"
    },
    {
      "title": "Unsigned Integer Types",
      "code": "// 符号なし整数\n// 0 to 255\nvar u8 uint8 = 255\n// 0 to 65535\nvar u16 uint16 = 65535\n// uint8 のエイリアス\nvar byte = 255"
    },
    {
      "title": "Floating-Point Types",
      "code": "// 浮動小数点数型\nvar f32 float32 = 3.14\n// IEEE-754 64-bit\nvar f64 float64 = 3.14159265359"
    },
    {
      "title": "Complex Types",
      "code": "// 複素数型\nvar c64 complex64 = 1 + 2i\nvar c128 complex128 = complex(3.5, 4.2)"
    },
    {
      "title": "String Declaration",
      "code": "// 文字列宣言 (不変のバイトシーケンス)\nvar str string = \"hello\""
    },
    {
      "title": "Raw String Literals",
      "code": "// 生文字列リテラル (改行を保持、エスケープなし)\nmultiline := `This is a\nmultiline string\nwith \"quotes\" intact`"
    },
    {
      "title": "Basic String Operations",
      "code": "// 文字列操作\ns := \"hello\"\n// 長さ: 5 (bytes, not runes)\nlen := len(s)\n// byte: 101 ('e')\nchar := s[1]\n// \"el\"\nsubstr := s[1:3]"
    },
    {
      "title": "String Concatenation",
      "code": "// 文字列連結\ns1 := \"hello\"\ns2 := \"world\"\n// \"hello world\"\ncombined := s1 + \" \" + s2"
    },
    {
      "title": "Strings and UTF-8/Runes",
      "code": "// UTF-8 と Unicode\n// UTF-8 エンコードされた文字列\ns := \"Hello, 世界\"\n// Unicode コードポイントに変換\nrunes := []rune(s)\nfor i, r := range s {\n// rune とそのバイト位置を出力\n  fmt.Printf(\"%d: %c\\n\", i, r)\n}"
    },
    {
      "title": "Boolean Declaration",
      "code": "// 真偽値\nvar isTrue bool = true\nvar isFalse bool = false\n\n// ゼロ値は false\n// false\nvar initialized bool"
    },
    {
      "title": "Boolean Operations",
      "code": "// 真偽値演算\n// false (AND)\nresult := isTrue && isFalse\n// true (OR)\nresult = isTrue || isFalse\n// false (NOT)\nresult = !isTrue"
    },
    {
      "title": "Boolean Evaluation",
      "code": "// 条件評価\nif isTrue {\n  // isTrue が true の場合に実行される\n}\n\n// 短絡評価\nif isValid() && doSomething() {\n  // doSomething() は isValid() が true を返す場合のみ呼び出される\n}"
    },
    {
      "title": "Explicit Numeric Conversions",
      "code": "// Go は明示的な型変換が必要\nvar i int = 42\n// int から float への変換\nvar f float64 = float64(i)\n// float から uint への変換\nvar u uint = uint(f)"
    },
    {
      "title": "String Conversions (Itoa/Atoi)",
      "code": "// 文字列変換\n// int to string: \"42\"\ns := strconv.Itoa(i)\n// string to int: 42, nil\ni, err := strconv.Atoi(s)"
    },
    {
      "title": "String/Byte Slice Conversions",
      "code": "// その他の文字列変換\n// string から byte スライスへ\nb := []byte(\"hello\")\n// byte スライスから string へ\ns := string(b)"
    },
    {
      "title": "Parsing Numeric Strings",
      "code": "// 数値文字列のパース\n// string to float64\nf, err := strconv.ParseFloat(\"3.14\", 64)\n// string to int64 (base 10)\ni, err := strconv.ParseInt(\"-42\", 10, 64)\n// string to uint64 (base 10)\nu, err := strconv.ParseUint(\"42\", 10, 64)"
    },
    {
      "title": "Formatting Values as Strings",
      "code": "// 値を文字列としてフォーマット\n// \"true\"\ns := strconv.FormatBool(true)\n// \"3.14\" (2 decimal places)\ns := strconv.FormatFloat(3.14, 'f', 2, 64)\n// \"-42\" (base 10)\ns := strconv.FormatInt(-42, 10)"
    },
    {
      "title": "Zero Values",
      "code": "// すべての型にはゼロ値がある (宣言されたが初期化されていない場合のデフォルト)\n// 0\nvar i int\n// 0.0\nvar f float64\n// false\nvar b bool\n// \"\" (empty string)\nvar s string\n// nil (zero pointer)\nvar p *int\n// nil (zero slice)\nvar slice []int\n// nil (zero map)\nvar map1 map[string]int\n// nil (zero channel)\nvar ch chan int\n// nil (zero function)\nvar func1 func()\n// nil (zero interface)\nvar err error\n\n// 構造体のゼロ値は、すべてのフィールドがそれぞれのゼロ値に設定される\ntype Person struct {\n  Name string\n  Age  int\n}\n// {Name: \"\", Age: 0}\nvar p Person"
    }
  ]
}
