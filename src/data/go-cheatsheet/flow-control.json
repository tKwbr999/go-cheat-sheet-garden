{
  "title": "Flow control",
  "codeExamples": [
    {
      "title": "If-else",
      "code": "// Basic if-else\nif x > 10 {\n  // do something\n} else if x > 5 {\n  // do something else\n} else {\n  // do another thing\n}\n\n// If with short statement\nif value := getValue(); value > 10 {\n  // value is available only in this scope\n  // and condition was true\n}\n\n// If with error check (common pattern)\nif err := doSomething(); err != nil {\n  // handle the error\n  return err\n}\n\n// Avoid else after return (Go style)\nif condition {\n  // handle this case\n  return // or break, continue\n}\n// code for the \"else\" case continues here"
    },
    {
      "title": "For loops",
      "code": "// Standard C-style for loop\nfor i := 0; i < 10; i++ {\n  // loop body\n}\n\n// For as while\nfor condition {\n  // loop body\n}\n\n// Infinite loop\nfor {\n  // loop body\n  if shouldBreak {\n    break\n  }\n}\n\n// For-range loop (arrays, slices, strings, maps, channels)\n// arrays, slices, strings: index, value\nfor index, value := range collection {\n  // use index and value\n}\n\n// maps: key, value\nfor key, value := range myMap {\n  // use key and value\n}\n\n// channels: just value\nfor value := range channel {\n  // use value\n}\n\n// Skip index or value with underscore\nfor _, value := range collection {\n  // use only value\n}\n\n// Just index\nfor index := range collection {\n  // use only index\n}"
    },
    {
      "title": "Switch",
      "code": "// Basic switch (no automatic fallthrough unlike C/Java)\nswitch value {\ncase 1:\n  // code for 1\ncase 2, 3:\n  // code for 2 or 3\ndefault:\n  // default code\n}\n\n// Switch with no expression (alternative to if-else chain)\nswitch {\ncase x > 100:\n  // code for x > 100\ncase x > 10:\n  // code for x > 10\ndefault:\n  // default code\n}\n\n// Switch with initialization statement\nswitch os := runtime.GOOS; os {\ncase \"darwin\":\n  fmt.Println(\"OS X\")\ncase \"linux\":\n  fmt.Println(\"Linux\")\ndefault:\n  fmt.Printf(\"%s\\n\", os)\n}\n\n// Fallthrough forces execution to the next case\nswitch n {\ncase 0:\n  fmt.Println(\"zero\")\n  fallthrough\ncase 1:\n  fmt.Println(\"one\")\n  // Will execute if n is 0 or 1\n}\n\n// Type switch (for interfaces)\nswitch v := interface{}.(type) {\ncase nil:\n  fmt.Println(\"nil value\")\ncase int:\n  fmt.Println(\"integer:\", v)\ncase string:\n  fmt.Println(\"string:\", v)\ndefault:\n  fmt.Printf(\"unexpected type: %T\\n\", v)\n}"
    },
    {
      "title": "Defer",
      "code": "// Defer statement executes function before surrounding function returns\n// Used for cleanup operations (close files, connections, etc.)\nfunc ReadFile(filename string) ([]byte, error) {\n  f, err := os.Open(filename)\n  if err != nil {\n    return nil, err\n  }\n  defer f.Close()  // f.Close() will execute when ReadFile returns\n  \n  return io.ReadAll(f)\n}\n\n// Multiple defers execute in LIFO order (last-in, first-out)\nfunc ProcessFiles() {\n  defer fmt.Println(\"1. Done processing\")\n  defer fmt.Println(\"2. Closing files\")\n  defer fmt.Println(\"3. Saving results\")\n  \n  // Output when function returns:\n  // 3. Saving results\n  // 2. Closing files\n  // 1. Done processing\n}\n\n// Defer evaluates arguments immediately, but executes function later\nfunc example() {\n  i := 1\n  defer fmt.Println(\"deferred:\", i)  // Will print \"deferred: 1\"\n  i++\n  fmt.Println(\"regular:\", i)  // Will print \"regular: 2\"\n}\n\n// Common use case: Mutex locking/unlocking\nfunc UpdateData(data *Data) {\n  data.mu.Lock()\n  defer data.mu.Unlock()\n  \n  // update data...\n}"
    },
    {
      "title": "Panic and Recover",
      "code": "// Panic stops normal execution of the current goroutine\n// Deferred functions are still executed\nfunc divide(a, b int) int {\n  if b == 0 {\n    panic(\"division by zero\")  // Causes program to crash unless recovered\n  }\n  return a / b\n}\n\n// Recover captures a panic and resumes normal execution\n// Only useful inside deferred functions\nfunc SafeDivide(a, b int) (result int, err error) {\n  // Set up recovery\n  defer func() {\n    if r := recover(); r != nil {\n      // Convert panic into an error\n      err = fmt.Errorf(\"panic occurred: %v\", r)\n    }\n  }()\n  \n  // This will panic if b is 0, but recover will catch it\n  result = a / b\n  return result, nil\n}\n\n// Example usage\nresult, err := SafeDivide(10, 0)  // Returns 0, error instead of crashing\n\n// Best practices:\n// 1. Use panic only for unrecoverable errors (e.g., corruption)\n// 2. Normal error handling should use error returns, not panic/recover\n// 3. Recover only from expected panics"
    }
  ]
}