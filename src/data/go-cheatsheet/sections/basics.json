{
  "title": "Basics",
  "codeExamples": [
    {
      "title": "Hello World: Goプログラムの第一歩",
      "description": "",
      "code": "package main // 実行可能なプログラムは main パッケージに属する\n\nimport \"fmt\" // フォーマット済み I/O を提供する fmt パッケージをインポート\n\n// main 関数: プログラムの実行開始地点 (エントリーポイント)\nfunc main() {\n\t// fmt.Println: 引数を標準出力に書き出し、改行を追加する\n\tfmt.Println(\"Hello, World!\")\n}"
    },
    {
      "title": "変数宣言: 値を記憶する箱 (`var`)",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\t// var キーワードで変数を宣言し、初期値を設定\n\tvar message string = \"こんにちは、Go!\"\n\tvar count int = 10\n\tvar pi float64 = 3.14159\n\tvar enabled bool = true\n\n\tfmt.Println(message)\n\tfmt.Println(\"カウント:\", count)\n\tfmt.Println(\"円周率:\", pi)\n\tfmt.Println(\"有効:\", enabled)\n\n\t// 初期値を省略するとゼロ値で初期化される\n\tvar name string // \"\"\n\tvar age int     // 0\n\tfmt.Println(\"名前(初期値):\", name)\n\tfmt.Println(\"年齢(初期値):\", age)\n}"
    },
    {
      "title": "短縮変数宣言 `:=`: より簡潔に書く",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\t// 短縮変数宣言 `:=` を使用\n\t// var と型指定を省略でき、型は右辺から推論される\n\tlanguage := \"Go\"      // string と推論\n\tversion := 1.22       // float64 と推論\n\treleased := true      // bool と推論\n\tyear := 2009          // int と推論\n\n\tfmt.Println(language, version, released, year)\n\tfmt.Printf(\"Type of year: %T\\n\", year) // Type of year: int\n\n\t// 再代入は `=` を使う\n\tyear = 2024\n\t// year := 2025 // エラー: no new variables on left side of :=\n\n\t// 少なくとも一つ新しい変数があれば `:=` を使える\n\tyear, month := 2025, 3 // OK: month が新しい\n\tfmt.Println(year, month)\n}"
    },
    {
      "title": "複数の変数をまとめて宣言する",
      "description": "関連する複数の変数を一度に宣言する方法がいくつかあります。\n\n**1. `var()` ブロック:**\n`var` キーワードの後に括弧 `()` を続け、ブロック内に複数の変数を宣言します。型が異なってもOK。パッケージレベルでも使用可能。",
      "code": "package main\n\nimport \"fmt\"\n\n// ダミー関数 (複数の値を返す)\nfunc getConfig() (string, int, bool) {\n\treturn \"localhost\", 8080, true\n}\n\nfunc main() {\n\t// `:=` を使って複数の変数を宣言・初期化\n\t// 左辺の変数と右辺の値が順番に対応\n\thost, port, enabled := \"example.com\", 443, true\n\tfmt.Println(host, port, enabled)\n\n\t// 関数の複数の戻り値を一度に受け取る\n\tserverHost, serverPort, serverEnabled := getConfig()\n\tfmt.Println(serverHost, serverPort, serverEnabled)\n\n\t// 一部の戻り値だけ必要な場合は _ を使う\n\t_, portOnly, _ := getConfig()\n\tfmt.Println(\"Port only:\", portOnly)\n}"
    },
    {
      "title": "変数の初期化: 宣言と同時に値を設定",
      "description": "変数を宣言する際、同時に最初の値（**初期値**）を設定することを**初期化**と呼びます。初期化により、変数が意図しないゼロ値を持つことを防ぎ、コードの意図が明確になります。\n\n**初期化と型推論:**\n`var` で変数を宣言する際に初期値を指定すると、多くの場合、型指定を省略できます。Goコンパイラが初期値から型を推論するためです。\n`var 変数名 = 初期値`\n*   コンパイラが `初期値` の型を判断し、自動的に `変数名` の型を決定します。\n*   これは短縮変数宣言 `:=` と同じ型推論の仕組みです。\n*   ただし、`var` は関数外（パッケージレベル）でも使用できます。\n\nコード例では `greeting`, `number`, `ratio` が型推論によって型が決まっています。`explicitType` は型を明示的に指定しています。\n\n**関数の戻り値を使った初期化:**\n変数の初期値には、他の関数呼び出しの結果（戻り値）も使用できます。",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\t// var で宣言時に初期値を指定すると、型を省略できる (型推論)\n\tvar greeting = \"おはよう\" // string と推論\n\tvar number = 100      // int と推論\n\tvar ratio = 0.5       // float64 と推論\n\n\tfmt.Printf(\"greeting: %s (%T)\\n\", greeting, greeting)\n\tfmt.Printf(\"number: %d (%T)\\n\", number, number)\n\tfmt.Printf(\"ratio: %f (%T)\\n\", ratio, ratio)\n\n\t// 型を明示することも可能\n\tvar explicitType int = 200\n\tfmt.Printf(\"explicitType: %d (%T)\\n\", explicitType, explicitType)\n}"
    },
    {
      "title": "ブランク識別子 `_`: 使わない値を無視する",
      "description": "",
      "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\t// 1. 関数の戻り値を一部無視\n\t// strconv.Atoi は (int, error) を返す\n\tnumericValue, _ := strconv.Atoi(\"42\") // エラーは無視\n\tfmt.Println(\"Value:\", numericValue)\n\n\t_, err := strconv.Atoi(\"abc\") // 値は無視\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n\t// 2. for range でインデックスや値を無視\n\tnums := []int{10, 20, 30}\n\t// インデックスを無視\n\tfor _, num := range nums {\n\t\tfmt.Println(\"Num:\", num)\n\t}\n\t// 値を無視\n\tfor i := range nums { // 値を受け取る変数を省略するとインデックスのみになる\n\t\tfmt.Println(\"Index:\", i)\n\t}\n}"
    },
    {
      "title": "定数宣言 `const`: 基本的な使い方",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\n// パッケージレベル定数\nconst Pi float64 = 3.14159 // 型を明示\nconst AppName = \"MyApp\"     // 型を省略 (string と推論)\nconst MaxUsers = 1000       // 型を省略 (int と推論)\nconst Enabled = true        // 型を省略 (bool と推論)\n\nfunc main() {\n\t// 関数内ローカル定数\n\tconst LocalConst = \"ローカル定数\"\n\n\tfmt.Println(\"Pi:\", Pi)\n\tfmt.Println(\"AppName:\", AppName)\n\tfmt.Println(\"MaxUsers:\", MaxUsers)\n\tfmt.Println(\"Enabled:\", Enabled)\n\tfmt.Println(\"LocalConst:\", LocalConst)\n\n\t// Pi = 3.14 // 定数は再代入不可 (コンパイルエラー)\n}"
    },
    {
      "title": "型無し定数 (Untyped Constant): 柔軟な型解釈",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\nconst UntypedInt = 100     // 型無し整数定数\nconst UntypedFloat = 3.14   // 型無し浮動小数点定数\nconst UntypedString = \"hello\" // 型無し文字列定数\n\nfunc main() {\n\tvar i int = UntypedInt       // OK: int に代入可能\n\tvar f64 float64 = UntypedInt // OK: float64 に代入可能 (100.0)\n\tvar f32 float32 = UntypedFloat // OK: float32 に代入可能\n\tvar s string = UntypedString // OK: string に代入可能\n\n\tfmt.Println(i, f64, f32, s) // 100 100 3.14 hello\n\n\tconst TypedInt int = 200 // 型付き整数定数\n\t// var f float64 = TypedInt // コンパイルエラー: 型が違うため代入不可\n}"
    },
    {
      "title": "複数の定数をまとめて宣言 `const()`",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\n// const() ブロックで関連する定数をまとめる\nconst (\n\tStatusOK        = 200 // HTTP OK\n\tStatusNotFound  = 404 // HTTP Not Found\n\tInternalError = 500 // HTTP Internal Server Error\n\t// ... 他のステータスコード\n)\n\nfunc main() {\n\tfmt.Println(\"OK:\", StatusOK)\n\tfmt.Println(\"Not Found:\", StatusNotFound)\n\tfmt.Println(\"Error:\", InternalError)\n}"
    },
    {
      "title": "`iota`: 連続する定数を簡単に作る魔法の言葉",
      "description": "`const()` ブロック内で連続した整数値を定数として定義したい場合に便利なのが **`iota`** です。`iota` は `const` 宣言ブロック内で使われる**定数ジェネレータ**です。\n\n**基本動作:**\n*   `iota` は `const` ブロックの最初の行で `0` にリセットされます (例: `A`, `D`)。\n*   `const` ブロック内で次の行に移ると、`iota` の値は自動的に `1` 増加します (例: `B` は 1, `C` は 2)。\n*   ある行の式が省略されると、直前の行と同じ式が適用されます。例の `E` と `F` では、直前の `D = iota` の式 `iota` が適用され、その時点での `iota` の値（それぞれ 1 と 2）が設定されます。\n\n**応用例:**\n`iota` は、曜日、状態、カテゴリなど、連続した整数値で表現したい定数群（他の言語での**列挙型 (enum)** に似たもの）を定義するのに非常に便利です。",
      "code": "package main\n\nimport \"fmt\"\n\n// iota は const ブロック内で 0 から始まり、行ごとに +1 される\nconst (\n\tA = iota // 0\n\tB = iota // 1\n\tC = iota // 2\n)\n\n// 式を省略すると直前の式が繰り返される\nconst (\n\tD = iota // 0\n\tE        // 1 (iota が繰り返される)\n\tF        // 2 (iota が繰り返される)\n)\n\nfunc main() {\n\tfmt.Println(\"Block 1:\", A, B, C) // 0 1 2\n\tfmt.Println(\"Block 2:\", D, E, F) // 0 1 2\n}"
    },
    {
      "title": "`iota` とビット演算: ビットフラグを賢く定義する",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\n// iota とビットシフトでビットフラグを定義\nconst (\n\tReadable   = 1 << iota // 1 (001)\n\tWritable   = 1 << iota // 2 (010)\n\tExecutable = 1 << iota // 4 (100)\n)\n\nfunc main() {\n\t// フラグを組み合わせる (ビットOR)\n\treadWrite := Readable | Writable // 1 | 2 = 3 (011)\n\tfmt.Println(\"ReadWrite:\", readWrite)\n\n\t// 特定のフラグが立っているか確認 (ビットAND)\n\tcanWrite := (readWrite & Writable) != 0   // (3 & 2) != 0 -> true\n\tcanExecute := (readWrite & Executable) != 0 // (3 & 4) != 0 -> false\n\n\tfmt.Println(\"Can Write:\", canWrite)\n\tfmt.Println(\"Can Execute:\", canExecute)\n}"
    },
    {
      "title": "パッケージの命名規則: コードを整理する名前付け",
      "description": "",
      "code": "package main // プログラムのエントリーポイントとなる特別なパッケージ\n\nimport \"fmt\"\n// import \"net/http\" // 例: http パッケージ\n// import \"mypackage/util\" // 例: util パッケージ\n\nfunc main() {\n\tfmt.Println(\"This is the main package.\")\n}"
    },
    {
      "title": "エクスポートされる識別子: パッケージの外から使える名前",
      "description": "",
      "code": "// greeting パッケージ\npackage greeting\n\n// エクスポートされる定数 (大文字始まり)\nconst DefaultPrefix = \"Hello, \"\n\n// エクスポートされない定数 (小文字始まり)\nconst defaultSuffix = \"!\"\n\n// エクスポートされる関数 (大文字始まり)\nfunc Say(name string) string {\n\treturn formatMessage(name) // 内部で非公開関数を呼ぶ\n}\n\n// エクスポートされない関数 (小文字始まり)\nfunc formatMessage(name string) string {\n\treturn DefaultPrefix + name + defaultSuffix\n}\n\n// エクスポートされる型とフィールド\n// type Message struct {\n//     PublicField string\n//     privateField int // 非公開フィールド\n// }"
    },
    {
      "title": "エクスポートされない識別子: パッケージ内部の名前",
      "description": "",
      "code": "package greeting\n\n// エクスポートされる定数 (比較用)\nconst DefaultPrefix = \"Hello, \"\n\n// エクスポートされない定数 (小文字始まり)\nconst defaultSuffix = \"!\"\n\n// エクスポートされる関数 (比較用)\nfunc Say(name string) string {\n\treturn formatMessage(name) // 内部で非公開関数を呼ぶ\n}\n\n// エクスポートされない関数 (小文字始まり)\nfunc formatMessage(name string) string {\n\treturn DefaultPrefix + name + defaultSuffix\n}\n\n// エクスポートされる型 (比較用)\ntype Message struct {\n\tPublicText string\n\t// エクスポートされないフィールド (小文字始まり)\n\tpriority int\n}"
    },
    {
      "title": "識別子内の頭字語: HTTP, URL, ID などの扱い方",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\n// エクスポートされる例 (頭字語は大文字)\nfunc ServeHTTP() { fmt.Println(\"ServeHTTP called\") }\ntype CustomerID string\ntype APIConfig struct {\n\tAPIKey    string\n\tEndpointURL string\n}\n\n// エクスポートされない例 (識別子全体が小文字始まり)\nconst defaultUserID CustomerID = \"user-001\"\nfunc buildURL(path string) string { return \"https://example.com/\" + path }\n// func serveHTTP() {} // もし非公開ならこう書く\n\nfunc main() {\n\tServeHTTP()\n\tvar userID CustomerID = \"cust-123\"\n\tconfig := APIConfig{APIKey: \"xyz\", EndpointURL: buildURL(\"data\")}\n\tfmt.Println(userID, config.APIKey, config.EndpointURL)\n\tfmt.Println(defaultUserID)\n}"
    },
    {
      "title": "インターフェースの命名: `-er` サフィックスの慣習",
      "description": "",
      "code": "package main\n\nimport \"fmt\"\n\n// Logger インターフェース (Log メソッドを一つ持つ)\ntype Logger interface {\n\tLog(message string)\n}\n\n// ConsoleLogger は Logger インターフェースを実装\ntype ConsoleLogger struct{ Prefix string }\nfunc (cl ConsoleLogger) Log(message string) {\n\tfmt.Println(cl.Prefix + message)\n}\n\n// Logger インターフェースを受け取る関数\nfunc process(logger Logger, data string) {\n\tlogger.Log(\"Processing: \" + data)\n}\n\nfunc main() {\n\tmyLogger := ConsoleLogger{Prefix: \"[INFO] \"}\n\tprocess(myLogger, \"Data A\") // ConsoleLogger は Logger として渡せる\n}"
    },
    {
      "title": "パッケージとディレクトリ構造: コードの置き場所",
      "description": "",
      "code": "package main\n\nimport (\n\t\"fmt\"\n\t// calculator パッケージをインポート\n\t// パスは \"モジュールパス/ディレクトリパス\"\n\t\"myproject/calculator\" // \"myproject\" は go.mod の module 名 (例)\n)\n\nfunc main() {\n\t// パッケージ名を使って関数を呼び出す\n\tsum := calculator.Add(5, 3)\n\tdiff := calculator.Subtract(5, 3)\n\n\tfmt.Println(\"Sum:\", sum)\n\tfmt.Println(\"Difference:\", diff)\n}\n\n// --- calculator/calculator.go (別ファイル) ---\n/*\npackage calculator // ディレクトリ名と同じパッケージ名\n\nfunc Add(a, b int) int { return a + b }\nfunc Subtract(a, b int) int { return a - b }\n*/"
    },
    {
      "title": "パッケージのインポート `import`: 他のコードを利用する",
      "description": "",
      "code": "package main\n\n// import() ブロックで複数のパッケージをインポート\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n\t// \"github.com/google/uuid\" // サードパーティ例\n\t// \"myproject/myutils\"    // ローカルパッケージ例\n)\n\nfunc main() {\n\t// パッケージ名を使って関数や変数にアクセス\n\tupper := strings.ToUpper(\"hello\")\n\tnow := time.Now()\n\tnum := rand.Intn(10)\n\n\tfmt.Println(upper, now.Format(time.Kitchen), num)\n}"
    }
  ]
}