{
  "title": "I/O Operations",
  "codeExamples": [
    {
      "title": "Reading Entire File (os.ReadFile)",
      "code": "// ファイル全体を読み込む\ndata, err := os.ReadFile(\"filename.txt\")\nif err != nil {\n  // エラー処理\n}\nfmt.Println(string(data))"
    },
    {
      "title": "Writing Entire File (os.WriteFile)",
      "code": "// ファイルへの書き込み\nerr = os.WriteFile(\"output.txt\", []byte(\"Hello, world!\"), 0644)\nif err != nil {\n  // エラー処理\n}"
    },
    {
      "title": "Opening Files (os.Open, os.Create, os.OpenFile)",
      "code": "// より詳細な制御でファイルを開く\n// 読み取り専用\nfileRead, err := os.Open(\"filename.txt\")\nif err != nil { /* エラー処理 */ }\ndefer fileRead.Close()\n\n// 書き込み用に開く (作成または切り捨て)\nfileWrite, err := os.Create(\"output.txt\")\nif err != nil { /* エラー処理 */ }\ndefer fileWrite.Close()\n\n// 特定のフラグとパーミッションで開く\nfileAppend, err := os.OpenFile(\"file.txt\", os.O_APPEND|os.O_WRONLY, 0644)\nif err != nil { /* エラー処理 */ }\ndefer fileAppend.Close()"
    },
    {
      "title": "Reading from File (file.Read)",
      "code": "// バッファを使用した読み込み\nfile, _ := os.Open(\"filename.txt\")\ndefer file.Close()\nbuf := make([]byte, 1024)\nn, err := file.Read(buf)\nif err != nil && err != io.EOF {\n  // エラー処理\n}\n// バッファを実際に読み取られたバイト数にリサイズ\nreadData := buf[:n]\nfmt.Println(string(readData))"
    },
    {
      "title": "Writing to File (file.Write)",
      "code": "// ファイルへの書き込み\nfile, _ := os.Create(\"output.txt\")\ndefer file.Close()\nn, err := file.Write([]byte(\"Hello, Go!\"))\nif err != nil {\n  // エラー処理\n}"
    },
    {
      "title": "Seeking in File (file.Seek)",
      "code": "// ファイル内でのシーク\nfile, _ := os.Open(\"filename.txt\")\ndefer file.Close()\n// 開始位置から10バイト目にシーク\nnewPos, err := file.Seek(10, io.SeekStart)\nif err != nil {\n  // エラー処理\n}\n// 現在位置から5バイト戻る\nnewPos, err = file.Seek(-5, io.SeekCurrent)\n// 末尾から20バイト前にシーク\nnewPos, err = file.Seek(-20, io.SeekEnd)"
    },
    {
      "title": "Copying Data (io.Copy, io.CopyN)",
      "code": "// reader から writer へデータをコピー\nnBytes, err := io.Copy(dstWriter, srcReader)\nif err != nil { /* エラー処理 */ }\n\n// バッファサイズ制限付きでコピー\nnBytesLimited, err := io.CopyN(dstWriter, srcReader, 1024)\nif err != nil && err != io.EOF { /* エラー処理 */ }"
    },
    {
      "title": "Temporary Directories (os.MkdirTemp)",
      "code": "// 一時ディレクトリを作成 (Go 1.16+)\ntempDir, err := os.MkdirTemp(\"\", \"my-app-*\") // * はランダムな文字列に置換される\nif err != nil { /* エラー処理 */ }\ndefer os.RemoveAll(tempDir) // クリーンアップ\nfmt.Println(\"Temp dir:\", tempDir)"
    },
    {
      "title": "Temporary Files (os.CreateTemp)",
      "code": "// 一時ファイルを作成 (Go 1.16+)\ntempFile, err := os.CreateTemp(\"\", \"my-app-*.tmp\")\nif err != nil { /* エラー処理 */ }\ndefer os.Remove(tempFile.Name()) // クリーンアップ\ndefer tempFile.Close()\nfmt.Println(\"Temp file:\", tempFile.Name())"
    },
    {
      "title": "Reading All from Reader (io.ReadAll)",
      "code": "// reader からすべて読み込む\nreader := strings.NewReader(\"some data\")\ndata, err := io.ReadAll(reader)\nif err != nil { /* エラー処理 */ }\nfmt.Println(string(data))"
    },
    {
      "title": "MultiReader (io.MultiReader)",
      "code": "// マルチリーダーを作成 (reader を連結)\nr1 := strings.NewReader(\"first \")\nr2 := strings.NewReader(\"second\")\nmultiReader := io.MultiReader(r1, r2)\ndata, _ := io.ReadAll(multiReader)\nfmt.Println(string(data)) // \"first second\""
    },
    {
      "title": "MultiWriter (io.MultiWriter)",
      "code": "// マルチライターを作成 (複数の writer に同時に書き込む)\nvar buf1, buf2 bytes.Buffer\nmultiWriter := io.MultiWriter(&buf1, &buf2)\nmultiWriter.Write([]byte(\"data\"))\nfmt.Println(buf1.String()) // \"data\"\nfmt.Println(buf2.String()) // \"data\""
    },
    {
      "title": "Buffered Reader (bufio.NewReader)",
      "code": "// バッファ付き読み込み\nfile, _ := os.Open(\"file.txt\")\ndefer file.Close()\nreader := bufio.NewReader(file)\n\n// 1バイト読み込み\nb, err := reader.ReadByte()\n\n// 区切り文字まで読み込み (例: 改行)\nline, err := reader.ReadString('\\n')"
    },
    {
      "title": "Buffered Scanner (bufio.NewScanner)",
      "code": "// 行ごとの読み込みのための Scanner\nfile, _ := os.Open(\"file.txt\")\ndefer file.Close()\nscanner := bufio.NewScanner(file)\nfor scanner.Scan() {\n  line := scanner.Text()\n  fmt.Println(line)\n}\nif err := scanner.Err(); err != nil {\n  // エラー処理\n}\n\n// カスタム分割関数 (例: 単語ごと)\nscanner.Split(bufio.ScanWords)"
    },
    {
      "title": "Buffered Writer (bufio.NewWriter)",
      "code": "// バッファ付き書き込み\nfile, _ := os.Create(\"output.txt\")\ndefer file.Close()\nwriter := bufio.NewWriter(file)\n\n// 文字列を書き込む\nn, err := writer.WriteString(\"Hello, world!\\n\")\n\n// バイトを書き込む\nerr = writer.WriteByte('X')\n\n// バッファを基底の writer にフラッシュ (重要!)\nerr = writer.Flush()\nif err != nil {\n  // エラー処理\n}"
    },
    {
      "title": "String as Reader (strings.NewReader)",
      "code": "// Reader としての文字列\nstrReader := strings.NewReader(\"This is a string reader.\")\ndata, _ := io.ReadAll(strReader)\nfmt.Println(string(data))"
    },
    {
      "title": "Bytes Buffer (bytes.NewBuffer)",
      "code": "// Buffer としてのバイト (Reader および Writer)\nbuffer := bytes.NewBuffer([]byte(\"Initial data\"))\n// バッファに追加\nbuffer.WriteString(\", more data\")\n// バイトを取得\ndata := buffer.Bytes()\nfmt.Println(string(data)) // \"Initial data, more data\"\n// バッファから読み込む\nreadData := make([]byte, 5)\nbuffer.Read(readData)\nfmt.Println(string(readData)) // \"Initi\""
    },
    {
      "title": "Limited Reader (io.LimitReader)",
      "code": "// reader の制限\nreader := strings.NewReader(\"1234567890abcdef\")\n// 最大 10 バイト読み込む\nlimitReader := io.LimitReader(reader, 10)\ndata, _ := io.ReadAll(limitReader)\nfmt.Println(string(data)) // \"1234567890\""
    },
    {
      "title": "Chaining Readers (e.g., Decompress + Decode)",
      "code": "// reader の連鎖 (例: 解凍してデコード)\n// compressedData は io.Reader (例: os.File, bytes.Buffer)\n// var compressedData io.Reader\n// decompressed, _ := gzip.NewReader(compressedData)\n// defer decompressed.Close()\n// decoder := json.NewDecoder(decompressed)\n// var targetData MyStruct\n// err := decoder.Decode(&targetData)"
    },
    {
      "title": "Chaining Writers (e.g., Encode + Compress)",
      "code": "// writer の連鎖 (例: エンコードして圧縮)\n// targetWriter は io.Writer (例: os.File, bytes.Buffer)\n// var targetWriter io.Writer\n// compressed := gzip.NewWriter(targetWriter)\n// defer compressed.Close()\n// encoder := json.NewEncoder(compressed)\n// err := encoder.Encode(sourceData)\n// compressed.Flush() // gzip writer のフラッシュも忘れずに"
    },
    {
      "title": "CSV Reader (encoding/csv)",
      "code": "// CSV reader の例\ncsvString := `\"Header 1\",\"Header 2\"\n\"Value 1\",\"Value 2\"\n`\ncsvReader := csv.NewReader(strings.NewReader(csvString))\nrecords, err := csvReader.ReadAll()\nif err != nil { /* エラー処理 */ }\nfmt.Println(records) // [[Header 1 Header 2] [Value 1 Value 2]]"
    },
    {
      "title": "CSV Writer (encoding/csv)",
      "code": "// CSV writer の例\nvar buf bytes.Buffer\ncsvWriter := csv.NewWriter(&buf)\nrecords := [][]string{\n    {\"Header 1\", \"Header 2\"},\n    {\"Value 1\", \"Value 2\"},\n}\nerr := csvWriter.WriteAll(records)\nif err != nil { /* エラー処理 */ }\ncsvWriter.Flush() // バッファをフラッシュ\nfmt.Println(buf.String())"
    },
    {
      "title": "Creating Directories (os.Mkdir, os.MkdirAll)",
      "code": "// ディレクトリを作成\nerr := os.Mkdir(\"my-single-dir\", 0755)\nif err != nil && !os.IsExist(err) { /* エラー処理 */ }\n\n// ネストされたディレクトリを作成 (親が存在しなくてもOK)\nerr = os.MkdirAll(\"path/to/my/nested/dir\", 0755)\nif err != nil { /* エラー処理 */ }"
    },
    {
      "title": "Working Directory (os.Getwd, os.Chdir)",
      "code": "// 現在のディレクトリを取得\ncurrentDir, err := os.Getwd()\nif err != nil { /* エラー処理 */ }\nfmt.Println(\"Current dir:\", currentDir)\n\n// ディレクトリを変更\nerr = os.Chdir(\"path/to/my\") // 存在すると仮定\nif err != nil { /* エラー処理 */ }\nnewDir, _ := os.Getwd()\nfmt.Println(\"New dir:\", newDir)"
    },
    {
      "title": "Reading Directory Entries (os.ReadDir, Go 1.16+)",
      "code": "// ディレクトリエントリを読み込む (Go 1.16+)\nentries, err := os.ReadDir(\".\") // 現在のディレクトリ\nif err != nil { /* エラー処理 */ }\n\nfor _, entry := range entries {\n  fmt.Printf(\"Name: %s, IsDir: %v\\n\", entry.Name(), entry.IsDir())\n  // 詳細情報が必要な場合\n  // info, err := entry.Info()\n  // if err == nil {\n  //   fmt.Println(\" Size:\", info.Size())\n  // }\n}"
    },
    {
      "title": "Walking Directory Tree (filepath.WalkDir, Go 1.16+)",
      "code": "// WalkDir はより効率的 (Go 1.16+)\nerr := filepath.WalkDir(\".\", func(path string, d fs.DirEntry, err error) error {\n  if err != nil {\n    fmt.Printf(\"Error accessing path %q: %v\\n\", path, err)\n    return err // エラーが発生したパスの処理を停止\n  }\n  if !d.IsDir() {\n    fmt.Println(\"File:\", path)\n  }\n  return nil // 次のエントリへ進む\n})\nif err != nil {\n  fmt.Println(\"WalkDir error:\", err)\n}"
    }
  ]
}
